-- programs ------------------------------------------------
entrypoints Program ;
Program. Program ::= [TopDef] ;
FnDef. TopDef ::= Type Ident "(" [Arg] ")" Block ;
separator nonempty TopDef "" ;
Arg. Arg ::= Type Ident;
separator Arg "," ;
-- statements ----------------------------------------------
Block. Block ::= "{" [Stmt] "}" ;
separator Stmt "" ;
BStmt. Stmt ::= Block ;
Cond. Stmt ::= "if" "(" Expr ")" Block ;
CondElse. Stmt ::= "if" "(" Expr ")" Block "else" Block ;
OrdStmt. Stmt ::= OrdStmt ;
While. OrdStmt ::= "while" "(" Expr ")" LBlock ;
For. OrdStmt ::= "for" "(" Ident "from" Expr "to" Expr ")" LBlock ;
Empty. OrdStmt ::= ";" ;
Decl. OrdStmt ::= Type [Item] ";" ;
NoInit. Item ::= Ident ;
Init. Item ::= Ident "=" Expr ;
separator nonempty Item "," ;
Ass. OrdStmt ::= Ident "=" Expr ";" ;
Incr. OrdStmt ::= Ident "++" ";" ;
Decr. OrdStmt ::= Ident "--" ";" ;
Ret. OrdStmt ::= "return" Expr ";" ;
VRet. OrdStmt ::= "return" ";" ;
Print. OrdStmt ::= "print" "(" Expr ")" ";" ;
SExp. OrdStmt ::= Expr ";" ;
LBlock. LBlock ::= "{" [LStmt] "}" ;
separator LStmt "" ;
LOrdStmt. LStmt ::= OrdStmt ;
LBStmt. LStmt ::= LBlock ;
LCond. LStmt ::= "if" "(" Expr ")" LBlock ;
LCondElse. LStmt ::= "if" "(" Expr ")" LBlock "else" LBlock ;
LBreak. LStmt ::= "break" ";" ;
LContinue. LStmt ::= "continue" ";" ;
-- Types ---------------------------------------------------
Int. Type ::= "int" ;
Str. Type ::= "string" ;
Bool. Type ::= "bool" ;
Void. Type ::= "void" ;
-- Expressions ---------------------------------------------
EVar. Expr6 ::= Ident ;
ELitInt. Expr6 ::= Integer ;
ELitTrue. Expr6 ::= "true" ;
ELitFalse. Expr6 ::= "false" ;
EApp. Expr6 ::= Ident "(" [Expr] ")" ;
EString. Expr6 ::= String ;
Neg. Expr5 ::= "-" Expr6 ;
Not. Expr5 ::= "!" Expr6 ;
EMul. Expr4 ::= Expr4 MulOp Expr5 ;
EAdd. Expr3 ::= Expr3 AddOp Expr4 ;
ERel. Expr2 ::= Expr2 RelOp Expr3 ;
EAnd. Expr1 ::= Expr2 "&&" Expr1 ;
EOr. Expr ::= Expr1 "||" Expr ;
coercions Expr 6 ;
separator Expr "," ;
-- operators -----------------------------------------------
Plus. AddOp ::= "+" ;
Minus. AddOp ::= "-" ;
Times. MulOp ::= "*" ;
Div. MulOp ::= "/" ;
Mod. MulOp ::= "%" ;
LTH. RelOp ::= "<" ;
LE. RelOp ::= "<=" ;
GTH. RelOp ::= ">" ;
GE. RelOp ::= ">=" ;
EQU. RelOp ::= "==" ;
NE. RelOp ::= "!=" ;
-- comments ------------------------------------------------
comment "#" ;
comment "//" ;
comment "/*" "*/" ;

-- programs ------------------------------------------------
entrypoints Program ;
Program. Program ::= [TopDef] ;
FnDef. TopDef ::= Type Ident "(" [Arg] ")" Block ;
separator nonempty TopDef "" ;
Arg. Arg ::= Type Ident;
separator Arg "," ;
-- statements ----------------------------------------------
Block. Block ::= "{" [Stmt] "}" ;
separator Stmt "" ;
BStmt. Stmt ::= Block ;
Cond. Stmt ::= "if" "(" Expr ")" Block ;
CondElse. Stmt ::= "if" "(" Expr ")" Block "else" Block ;
While. Stmt ::= "while" "(" Expr ")" Block ;
For. Stmt ::= "for" "(" Ident "from" Expr "to" Expr ")" Block ;
Empty. Stmt ::= ";" ;
Decl. Stmt ::= Type [Item] ";" ;
NoInit. Item ::= Ident ;
Init. Item ::= Ident "=" Expr ;
separator nonempty Item "," ;
Ass. Stmt ::= Ident "=" Expr ";" ;
Incr. Stmt ::= Ident "++" ";" ;
Decr. Stmt ::= Ident "--" ";" ;
Ret. Stmt ::= "return" Expr ";" ;
VRet. Stmt ::= "return" ";" ;
Print. Stmt ::= "print" "(" Expr ")" ";" ;
SExp. Stmt ::= Expr ";" ;
Break. Stmt ::= "break" ";" ;
Continue. Stmt ::= "continue" ";" ;
-- types ---------------------------------------------------
Int. Type ::= "int" ;
Str. Type ::= "string" ;
Bool. Type ::= "bool" ;
Void. Type ::= "void" ;
-- expressions ---------------------------------------------
Var. Expr6 ::= Ident ;
LitInt. Expr6 ::= Integer ;
LitTrue. Expr6 ::= "true" ;
LitFalse. Expr6 ::= "false" ;
LitString. Expr6 ::= String ;
App. Expr6 ::= Ident "(" [Expr] ")" ;
Neg. Expr5 ::= "-" Expr6 ;
Not. Expr5 ::= "!" Expr6 ;
Mul. Expr4 ::= Expr4 MulOp Expr5 ;
Add. Expr3 ::= Expr3 AddOp Expr4 ;
Rel. Expr2 ::= Expr2 RelOp Expr3 ;
And. Expr1 ::= Expr2 "&&" Expr1 ;
Or. Expr ::= Expr1 "||" Expr ;
coercions Expr 6 ;
separator Expr "," ;
-- operators -----------------------------------------------
Plus. AddOp ::= "+" ;
Minus. AddOp ::= "-" ;
Times. MulOp ::= "*" ;
Div. MulOp ::= "/" ;
Mod. MulOp ::= "%" ;
LTH. RelOp ::= "<" ;
LTE. RelOp ::= "<=" ;
GTH. RelOp ::= ">" ;
GTE. RelOp ::= ">=" ;
EQU. RelOp ::= "==" ;
NEQ. RelOp ::= "!=" ;
-- comments ------------------------------------------------
comment "#" ;
comment "//" ;
comment "/*" "*/" ;
